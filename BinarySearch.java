import java.util.List; // se importo java.utils para evitar errores de compilac√≠on.
import java.util.Scanner;
import java.util.Collections; 

public class BinarySearch {
    public static int buscar(List<Integer> lista, int objetivo) {
        int inicio = 0;
        int fin = lista.size() - 1;

        while (inicio <= fin) {
            int medio = inicio + (fin - inicio) / 2;
            
            // Si encontramos el elemento
            if (lista.get(medio) == objetivo) {
                return medio; // Devuelve el √≠ndice del elemento
            }
            
            // Si el objetivo es mayor que el elemento medio
            if (lista.get(medio) < objetivo) {
                inicio = medio + 1;
            } else {
                fin = medio - 1;
            }
        }
        
        return -1; // Si el elemento no est√° presente en la lista
    }

    public static void opcionBinarySearch(Scanner scanner, List<Integer> lista) {
        if (lista.isEmpty()) {
            System.out.println("‚ùå No hay datos cargados. Cargue datos primero.");
            return;
        }

        // Ordenar la lista antes de la b√∫squeda binaria
        Collections.sort(lista);
        System.out.println("üìå La lista se ha ordenado autom√°ticamente para la b√∫squeda binaria.");

        System.out.print("Ingrese el n√∫mero que desea buscar: ");
        int objetivo = scanner.nextInt(); // Se elimin√≥ new java.util.Scanner(System.in).nextInt(); y se us√≥ un Scanner existente porque generaba problemas con la entrada de datos.
        

        int resultado = buscar(lista, objetivo);

        if (resultado == -1) {
            System.out.println("‚ùå El n√∫mero no est√° en la lista.");
        } else {
            System.out.println("‚úÖ El n√∫mero " + objetivo + " se encuentra en el √≠ndice: " + resultado);
        }
    }
}